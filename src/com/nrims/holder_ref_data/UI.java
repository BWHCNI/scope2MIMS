/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nrims.holder_ref_data;

import com.nrims.holder_transform.CoeffCalculator;
import com.nrims.holder_data.DataIO;
import com.nrims.holder_data.DataPointFileProcessor;
import com.nrims.holder_data.REFDataFile;
import com.nrims.holder_transform.ComputeCoefficients_n2mc;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.HashSet;
import java.util.Set;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;



//Choosable filters for filechooser. Might want to move these into another class.

/**
 *
 * @author fkashem
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form Holder_Ref_Data_App
     */
    public UI() {
        initComponents();
        initInternalData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        srcTableRightClick = new javax.swing.JPopupMenu();
        toggleRefPoint = new javax.swing.JMenuItem();
        refTableRightClick = new javax.swing.JPopupMenu();
        changeZ = new javax.swing.JMenuItem();
        srcLabel = new javax.swing.JLabel();
        destLabel = new javax.swing.JLabel();
        destScrollPane = new javax.swing.JScrollPane();
        destReviewTable = new javax.swing.JTable();
        srcScrollPane = new javax.swing.JScrollPane();
        srcReviewTable = new javax.swing.JTable();
        logLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusTextPane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        setupMenu = new javax.swing.JMenu();
        loadSrcPts = new javax.swing.JMenuItem();
        loadCoeff = new javax.swing.JMenuItem();
        calcCoeffMenuItem = new javax.swing.JMenuItem();
        clearAllMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        srcTableRightClick.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        srcTableRightClick.setInvoker(srcReviewTable);

        toggleRefPoint.setText("Toggle Reference Point");
        toggleRefPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRefPointActionPerformed(evt);
            }
        });
        srcTableRightClick.add(toggleRefPoint);

        refTableRightClick.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        refTableRightClick.setInvoker(destReviewTable);

        changeZ.setText("Change Z Coordinate");
        changeZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeZActionPerformed(evt);
            }
        });
        refTableRightClick.add(changeZ);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("scope2MIMS");

        srcLabel.setText("Source Points");

        destLabel.setText("Destination Points");

        destReviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        destReviewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                destReviewTableMouseClicked(evt);
            }
        });
        destScrollPane.setViewportView(destReviewTable);

        srcReviewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                srcReviewTableMouseClicked(evt);
            }
        });
        srcScrollPane.setViewportView(srcReviewTable);

        logLabel.setText("Log: ");

        statusTextPane.setEditable(false);
        statusTextPane.setPreferredSize(new java.awt.Dimension(6, 300));
        jScrollPane3.setViewportView(statusTextPane);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setupMenu.setText("Setup");

        loadSrcPts.setText("Load Source Points File");
        loadSrcPts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSrcPtsActionPerformed(evt);
            }
        });
        setupMenu.add(loadSrcPts);

        loadCoeff.setText("Load Coefficient File");
        loadCoeff.setEnabled(false);
        loadCoeff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCoeffActionPerformed(evt);
            }
        });
        setupMenu.add(loadCoeff);

        calcCoeffMenuItem.setText("Calculate Coefficients");
        calcCoeffMenuItem.setEnabled(false);
        calcCoeffMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcCoeffMenuItemActionPerformed(evt);
            }
        });
        setupMenu.add(calcCoeffMenuItem);

        clearAllMenuItem.setText("Clear all");
        clearAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllMenuItemActionPerformed(evt);
            }
        });
        setupMenu.add(clearAllMenuItem);

        menuBar.add(setupMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(srcScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                            .addComponent(srcLabel))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                            .addComponent(destLabel))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logLabel)
                            .addComponent(jScrollPane3))
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srcLabel)
                    .addComponent(destLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(destScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                    .addComponent(srcScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(logLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void loadCoeffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCoeffActionPerformed
        int returnVal = fc.showOpenDialog( this );
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            coeffFilePath = fc.getSelectedFile().getPath();
            dpfp.setCoeffFilePath(coeffFilePath);
        }
    }//GEN-LAST:event_loadCoeffActionPerformed

    private void loadSrcPtsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSrcPtsActionPerformed
        int returnVal = fc.showOpenDialog( this );
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String whichFile = dpfp.openSrc(fc.getSelectedFile().getPath());
            if(whichFile.contains("Cannot open file")) {
                updateStatus(whichFile, true);
                return;
            } else if(whichFile.contains(".ref")) {
                srcTableRefresh(TableCode.REF);
                enableCoordinateActions(false);
                saveMenuItem.setEnabled(true);
            } else if(whichFile.contains(".points")) {
                srcTableRefresh(TableCode.NIKON);
                saveMenuItem.setEnabled(false);
                enableCoordinateActions(true);
            }
            updateStatus(whichFile);
            destTableRefresh(TableCode.CLEAR);
        }
        
    }//GEN-LAST:event_loadSrcPtsActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(null,"Scope to MIMS tool, version 1.0. \n http://www.nrims.harvard.edu/", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /*
     * Right click on rows in source table
     */
    private void srcReviewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_srcReviewTableMouseClicked
        if(SwingUtilities.isRightMouseButton(evt)) {
            if(srcReviewTable.getModel() == nikonTableModel) {
                srcTableRightClick.show(srcReviewTable, evt.getX(), evt.getY());
            } else if(srcReviewTable.getModel() == refTableModel) {
                refTableRightClick.show(srcReviewTable, evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_srcReviewTableMouseClicked

    private void toggleRefPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRefPointActionPerformed
        // Get list of points selected -->  iterate through list, toggle isReference
        for (int i : srcReviewTable.getSelectedRows()) {
            boolean addRemove = dpfp.toggleReferenceFlag(i); 
            if(addRemove) {
                updateStatus("Point " + dpfp.getScopePoints().get(i).getNum() + ": reference point added.");
            } else {
                updateStatus("Point " + dpfp.getScopePoints().get(i).getNum() + ": reference point removed.");
            }
        }
        
        updateStatus(dpfp.getReferencePoints().size() + " reference points total.");
        srcReviewTable.clearSelection();
        srcTableRefresh(TableCode.NIKON);
    }//GEN-LAST:event_toggleRefPointActionPerformed

    private void calcCoeffMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcCoeffMenuItemActionPerformed
        if(calculator != null) {
            calculator.setData(dpfp);
        } else {
            calculator = new CoeffCalculator(dpfp, this);
        }
        calculator.showWindow();
    }//GEN-LAST:event_calcCoeffMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        fc.setFileFilter(refFilter);
        fc.addChoosableFileFilter(prsFilter);
        fc.setAcceptAllFileFilterUsed(false);
        int saveApprove = fc.showSaveDialog( this );
        if (saveApprove == JFileChooser.APPROVE_OPTION) {
            updateStatus(dpfp.save(fc.getSelectedFile().getAbsolutePath(), fc.getFileFilter().getDescription()));
        }
        fc.setAcceptAllFileFilterUsed(true);
        fc.resetChoosableFileFilters();
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void changeZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeZActionPerformed
        
        double newZ = Double.parseDouble(JOptionPane.showInputDialog("Enter new Z Coordinate"));
        //Check which table invoked the dialog
        JTable invoked = (JTable) refTableRightClick.getInvoker();
        // Get list of points selected -->  iterate through list, change z to set.
        for (int i : invoked.getSelectedRows()) {
            dpfp.getMachinePoints().get(i).setZCoord(newZ);
        }
        
        updateStatus("Z coordinate changed to "+ newZ);
        invoked.clearSelection();
        if(invoked == destReviewTable) {
            destTableRefresh(TableCode.REF);
        } else if (invoked == srcReviewTable) {
            srcTableRefresh(TableCode.REF);
        }
    }//GEN-LAST:event_changeZActionPerformed

    private void destReviewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_destReviewTableMouseClicked
       if(SwingUtilities.isRightMouseButton(evt)) {
            refTableRightClick.show(destReviewTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_destReviewTableMouseClicked

    private void clearAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllMenuItemActionPerformed
        dpfp.clearData();
        calculator = new CoeffCalculator();
        destTableRefresh(TableCode.CLEAR);
        srcTableRefresh(TableCode.CLEAR);
        enableCoordinateActions(false);
        saveMenuItem.setEnabled(false);
        
        
    }//GEN-LAST:event_clearAllMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new UI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem calcCoeffMenuItem;
    private javax.swing.JMenuItem changeZ;
    private javax.swing.JMenuItem clearAllMenuItem;
    private javax.swing.JLabel destLabel;
    private javax.swing.JTable destReviewTable;
    private javax.swing.JScrollPane destScrollPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem loadCoeff;
    private javax.swing.JMenuItem loadSrcPts;
    private javax.swing.JLabel logLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPopupMenu refTableRightClick;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu setupMenu;
    private javax.swing.JLabel srcLabel;
    private javax.swing.JTable srcReviewTable;
    private javax.swing.JScrollPane srcScrollPane;
    private javax.swing.JPopupMenu srcTableRightClick;
    private javax.swing.JTextPane statusTextPane;
    private javax.swing.JMenuItem toggleRefPoint;
    // End of variables declaration//GEN-END:variables

    /* custom private variables */
    private DataPointFileProcessor dpfp;
    private RDRTableModel refTableModel;
    private NikonTableModel nikonTableModel;
    private JDialog aboutBox;
    private JFileChooser fc = new JFileChooser();
    private String coeffFilePath;
    private String coordFilePath;
    private String refFilePath;
    private CoeffCalculator calculator;
    private RefFileFilter refFilter = new RefFileFilter();
    private PrsFileFilter prsFilter = new PrsFileFilter();
    
    /* Stuff for the log textPane */
    private StyledDocument status;
    private SimpleAttributeSet attr;
    private SimpleAttributeSet attrError;
    
    /* Codes for using the source tables. This is not the best way to do this. */
    public enum TableCode { REFRESH, NIKON, CLEAR, REF };
    
    public DataPointFileProcessor getData() {
        return dpfp;
    }
    
    private void initInternalData()
    {
       // data_point_comment_text.setText(
        //        dpfp.getRefPointList().getDefaultRefPointComment()
         //       );
       dpfp = new DataPointFileProcessor(this);
       refTableModel = new RDRTableModel(dpfp);
       nikonTableModel = new NikonTableModel(dpfp);
       srcReviewTable.setDefaultRenderer(Object.class, new ReferenceTableRender());
       
       //Set the formatting of the window.
       status = statusTextPane.getStyledDocument();
       
       attrError = new SimpleAttributeSet();
       StyleConstants.setForeground(attrError, Color.RED);
       StyleConstants.setFontSize(attrError, 13);
       
       attr = new SimpleAttributeSet();
       StyleConstants.setFontSize(attr, 13);
       
    }
    
    /*
     * Refreshes destReviewTable with .ref points from dataPointFileProcessor
     */
    public void destTableRefresh(TableCode model) {
        switch(model) {
            case REF: 
                refTableModel.setDataPointFileProcessor(dpfp);
                destReviewTable.setModel(refTableModel);
                destReviewTable.repaint();
                saveMenuItem.setEnabled(true);
            break;
            case CLEAR:
                destReviewTable.setModel(new DefaultTableModel());
                destReviewTable.repaint();
            break;
        }
    }
    
    /*
     * Refreshes source table with either nikon points or .ref points
     * Clear destination table every time the source table is reloaded
     * @param String modelType "nikon" or "ref" 
     */
    private void srcTableRefresh(TableCode model) {
        switch(model) {
            case REFRESH: 
               srcReviewTable.setModel(srcReviewTable.getModel());
               srcReviewTable.repaint();
            break;
            case NIKON: 
               nikonTableModel.setDataPointFileProcessor(dpfp);
               srcReviewTable.setModel(nikonTableModel);
               //Hide reference column in view if not hidden.
               if(srcReviewTable.getColumnModel().getColumnCount() > 4) {
                   srcReviewTable.removeColumn(srcReviewTable.getColumnModel().getColumn(4));
               }
               srcReviewTable.repaint();
            break;
            case REF:
                refTableModel.setDataPointFileProcessor(dpfp);
                srcReviewTable.setModel(refTableModel);
                srcReviewTable.repaint();
                //This should go in a different method.
                saveMenuItem.setEnabled(true);
            break;
            case CLEAR:
                srcReviewTable.setModel(new DefaultTableModel());
                srcReviewTable.repaint();
            break;
        }
       
    }
    
    /*
     * Prints a string to the status log text area.
     * @param String to be printed
     */
    public void updateStatus(String line) {
        try {
            status.insertString(status.getLength(), line + "\n", attr );
        } catch(Exception e) { 
            System.out.println(e); 
        }
    }
    
    /*
     * Overloaded method, might combine into one at some point
     */
    public void updateStatus(String line, boolean error) {
        try { 
            status.insertString(status.getLength(), line + "\n", attrError);
        } catch(Exception e) {
            System.out.println(e);
        }
    }
    
    protected void enableCoordinateActions(boolean set) {
        loadCoeff.setEnabled(set);
        calcCoeffMenuItem.setEnabled(set);
    }
    
    protected void computeDialogOpen(boolean flag) {
        boolean showThese = !flag;
        saveMenuItem.setEnabled(showThese);
        loadCoeff.setEnabled(showThese);
        loadSrcPts.setEnabled(showThese);
        toggleRefPoint.setEnabled(showThese);
        calcCoeffMenuItem.setEnabled(showThese);
    }
    
    
    /*
     * Get the filechooser for use in another window.
     */
    public JFileChooser getFileChooser() {
        return fc;
    }
}