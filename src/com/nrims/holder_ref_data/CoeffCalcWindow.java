/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nrims.holder_ref_data;

import com.nrims.holder_transform.CoeffCalculator;
import com.nrims.holder_data.DataIO;
import com.nrims.holder_data.DataPointFileProcessor;
import com.nrims.holder_data.DataPoint;
import java.awt.Color;
import java.awt.GridLayout;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.*;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author fkashem
 */
public class CoeffCalcWindow extends javax.swing.JFrame {

    /**
     * Creates new form CoeffCalcWindow
     */
    public CoeffCalcWindow() {
        initComponents();
        
    }
    
    public CoeffCalcWindow(ArrayList<DataPoint> referencePoints, UI calledFrom, CoeffCalculator calc) {
        refPoints = referencePoints;
        numPoints = refPoints.size();
        parentFrame = calledFrom;
        calculator = calc;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calcButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pointContainer = new javax.swing.JPanel();
        refPointsPanel = new javax.swing.JPanel();
        foundPointsPanel = new javax.swing.JPanel();
        foundPointsLabel = new javax.swing.JLabel();
        refPointsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calculate Coefficients");
        setName("mainFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        calcButton.setText("Calculate");
        calcButton.setEnabled(false);
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(52767, 52767));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(0, 0));

        pointContainer.setBorder(null);
        pointContainer.setPreferredSize(new java.awt.Dimension(527, 290));

        refPointsPanel.setBorder(null);

        javax.swing.GroupLayout refPointsPanelLayout = new javax.swing.GroupLayout(refPointsPanel);
        refPointsPanel.setLayout(refPointsPanelLayout);
        refPointsPanelLayout.setHorizontalGroup(
            refPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
        );
        refPointsPanelLayout.setVerticalGroup(
            refPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        foundPointsPanel.setBorder(null);

        javax.swing.GroupLayout foundPointsPanelLayout = new javax.swing.GroupLayout(foundPointsPanel);
        foundPointsPanel.setLayout(foundPointsPanelLayout);
        foundPointsPanelLayout.setHorizontalGroup(
            foundPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 183, Short.MAX_VALUE)
        );
        foundPointsPanelLayout.setVerticalGroup(
            foundPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        foundPointsLabel.setText("Found Points");

        refPointsLabel.setText("Source Reference Points");

        javax.swing.GroupLayout pointContainerLayout = new javax.swing.GroupLayout(pointContainer);
        pointContainer.setLayout(pointContainerLayout);
        pointContainerLayout.setHorizontalGroup(
            pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pointContainerLayout.createSequentialGroup()
                        .addComponent(refPointsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addComponent(foundPointsLabel)
                        .addGap(101, 101, 101))
                    .addGroup(pointContainerLayout.createSequentialGroup()
                        .addComponent(refPointsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(foundPointsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pointContainerLayout.setVerticalGroup(
            pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointContainerLayout.createSequentialGroup()
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foundPointsLabel)
                    .addComponent(refPointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(foundPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(153, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(pointContainer);

        statusPane.setEditable(false);
        jScrollPane2.setViewportView(statusPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(calcButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        
        //Collect and pass to calculate object as long as some found points are selected.
        if(collectInput(false)) {
            updateStatus("Calculating with " + mimsPts.length + " reference points.", false);
            calculator.calculateCoeffs();
        
            //Grab accuracy and display
            calculator.calculateError();
            updateStatus(calculator.printError(), true);
            calculator.exportData(usedRefPoints);
        } else {
            updateStatus("Enter the x and y coordinate of found machine points (>=3) to calculate.", true);
        }
    }//GEN-LAST:event_calcButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        parentFrame.computeDialogOpen(false);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        parentFrame.computeDialogOpen(true);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
      //check if there are any inputs, then check if inputs are valid
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        if(inputFound != null) {
        if(!collectInput(true)) {
            setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            String error = "Warning: Invalid input detected in coordinate fields. Found coordinates may not be saved properly. Are you sure you want to exit?";
            int reply = JOptionPane.showConfirmDialog(this, error, "Invalid Input Error", JOptionPane.YES_NO_OPTION);
            if(reply == JOptionPane.YES_OPTION) {
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
        }
        collectInput(true);
        }

    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcButton;
    private javax.swing.JLabel foundPointsLabel;
    private javax.swing.JPanel foundPointsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pointContainer;
    private javax.swing.JLabel refPointsLabel;
    private javax.swing.JPanel refPointsPanel;
    private javax.swing.JTextPane statusPane;
    // End of variables declaration//GEN-END:variables

    
    private int numPoints;
    private ArrayList<DataPoint> refPoints;
    private ArrayList<DataPoint> usedRefPoints = new ArrayList<DataPoint>();
    private CoeffCalculator calculator;
    private UI parentFrame;
    
    //Array holding references to the textfields added for input
    private JTextField[][] inputFound;
    
    //Compute coefficients method takes two doubles //
    private double[][] nikonPts;
    private double[][] mimsPts;
    
    //for the status pane
    private StyledDocument status;
    private SimpleAttributeSet attr;
    private SimpleAttributeSet attrError;
    
    /* Getters */
    
    public ArrayList<DataPoint> getData() {
        return refPoints;
    }
    
    public int getNumPoints() {
        return numPoints;
    }
    
    /* Changing dpfp changes the number of reference points. */
    public void setData(ArrayList<DataPoint> referencePoints) {
        refPoints = referencePoints;
        numPoints = refPoints.size();
        foundPointsPanel.removeAll();
        refPointsPanel.removeAll();
        initComponentsCustom();
    }
    
    
    private void initComponentsCustom() {
        
       //Set the formatting of the window.
       status = statusPane.getStyledDocument();
       
       attrError = new SimpleAttributeSet();
       StyleConstants.setForeground(attrError, Color.RED);
       StyleConstants.setFontSize(attrError, 13);
       
       attr = new SimpleAttributeSet();
       StyleConstants.setFontSize(attr, 13);
        //Whenever we initialize, clear our status box
        statusPane.setText("");
        
        //If no reference points selected, don't try to draw/enable anything.
        if (numPoints == 0) {
            updateStatus("No reference points selected.", true);
            return;
        }
            
        updateStatus(numPoints + " reference points selected.", false);
        calcButton.setEnabled(true);
     
        //Set grid for panels
        // Rows = number of points + 1 for headings
        refPointsPanel.setLayout(new GridLayout((numPoints+1), 3, 6, 1));
        foundPointsPanel.setLayout(new GridLayout((numPoints+1),2, 3, 1));
        
        //Set the dimensions for the array of textfields
        inputFound = new JTextField[numPoints][2];
        
        //Add headings for columns
        refPointsPanel.add(new JLabel("Point"));
        refPointsPanel.add(new JLabel("X Coord"));
        refPointsPanel.add(new JLabel("Y Coord"));
        foundPointsPanel.add(new JLabel("X Coord"));
        foundPointsPanel.add(new JLabel("Y Coord"));
        
        //Sort reference list of points
        Collections.sort(refPoints);
        
        //Loop over refPoints and populate window
        for (int i = 0; i < numPoints; i++) {
           //Left side.
           Double x = refPoints.get(i).getXCoord();
           Double y = refPoints.get(i).getYCoord();
           int index = refPoints.get(i).getNum();
           refPointsPanel.add(new JLabel("Point " + index));
           refPointsPanel.add(new JLabel(x.toString()));
           refPointsPanel.add(new JLabel(y.toString()));
           
           //Check if ref points have associated found coordinates already.
           String xFound = new String();
           String yFound = new String();
           if(refPoints.get(i).getIsFound()) {
               xFound = Double.toString(refPoints.get(i).getXFound());
               yFound = Double.toString(refPoints.get(i).getYFound());
           }
           
           //Right Side
           
           //Create textfield objects for x and y per row         
           JTextField xInput = new JTextField(xFound);
           JTextField yInput = new JTextField(yFound);

           //Add to array
           inputFound[i][0] = xInput;
           inputFound[i][1] = yInput;
        
           //Add to panel
           foundPointsPanel.add(xInput);
           foundPointsPanel.add(yInput);
        }
        
        
    }
    
    /*
     * Collect coords for all points with found coords input. 
     */
    private boolean collectInput(boolean closing) {
        boolean collected = false;
        usedRefPoints.clear();
        
        //Arraylist to hold the rows referring to reference points with mims points filled in
        ArrayList<Integer> pointsInput = new ArrayList<Integer>();
        
        //Go through inputFound array
        for(int i = 0; i < inputFound.length; i++) {
            //If found coords are set for x and y, add to ArrayList
            if(!inputFound[i][0].getText().isEmpty()) {
                pointsInput.add(i);
            } else {
                //Check if the point has isFound set to true, if so, change.
                if(refPoints.get(i).getIsFound()) {
                    refPoints.get(i).setIsFound(false);
                }
            }
        }
        
        //If no coords are set, return true. Nothing to collect.
        if(pointsInput.isEmpty()) {
            return true;
        }
        
        //Initialize the two arraylists to the proper size
        int numPoints = pointsInput.size();
        nikonPts = new double[numPoints][2];
        mimsPts = new double[numPoints][2];
        
 
        double xInputFound, yInputFound;
        for(int i = 0; i < pointsInput.size(); i++) {
               try {
                    xInputFound = Double.parseDouble(inputFound[pointsInput.get(i)][0].getText());
                    yInputFound = Double.parseDouble(inputFound[pointsInput.get(i)][1].getText());
                    
                    //Populate these arrays to send to the calculator
                    nikonPts[i][0] = refPoints.get(pointsInput.get(i)).getXCoord();
                    nikonPts[i][1] = refPoints.get(pointsInput.get(i)).getYCoord();
                    mimsPts[i][0] = xInputFound;
                    mimsPts[i][1] = yInputFound;

                    //Also add the found coords to the point object
                    refPoints.get(pointsInput.get(i)).setXFound(mimsPts[i][0]);
                    refPoints.get(pointsInput.get(i)).setYFound(mimsPts[i][1]);
                    refPoints.get(pointsInput.get(i)).setIsFound(true);
                    
                    //Add this point to the usedRefPoints list.
                    usedRefPoints.add(refPoints.get(pointsInput.get(i)));

                    collected = true;
                } catch (NumberFormatException exc) {
                    collected = false;
                    if(!closing) {
                        String error = "Only numbers are accepted in coordinate fields. Invalid input detected for point " + refPoints.get(pointsInput.get(i)).getNum();
                        JOptionPane.showMessageDialog(this, error, "Invalid Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                     break;
                }           
        }
        
        //Send these to calculator
        calculator.setMimsPts(mimsPts);
        calculator.setNikonPts(nikonPts);
        
        
        return collected;
    }
  
    
    private void updateStatus(String text, boolean error) {
        try {
            if(error) {
                status.insertString(status.getLength(), text + "\n", attrError );
            } else {
                status.insertString(status.getLength(), text + "\n", attr );
            }
        } catch(Exception e) { 
            System.out.println(e); 
        }
    }

    
}
