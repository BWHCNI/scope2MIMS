/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nrims.holder_ref_data;

import com.nrims.holder_data_mgmt.DataPointFileProcessor;
import java.awt.GridLayout;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author fkashem
 */
public class CoeffCalcWindow extends javax.swing.JFrame {

    /**
     * Creates new form CoeffCalcWindow
     */
    public CoeffCalcWindow() {
        initComponents();
        
    }
    
    public CoeffCalcWindow(DataPointFileProcessor dpfp) {
        data = dpfp;
        numPoints = data.getReferencePoints().size();
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calcButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pointContainer = new javax.swing.JPanel();
        refPointsPanel = new javax.swing.JPanel();
        foundPointsPanel = new javax.swing.JPanel();
        foundPointsLabel = new javax.swing.JLabel();
        refPointsLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusBox = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calculate Coefficients");
        setName("mainFrame");

        calcButton.setText("Calculate");
        calcButton.setEnabled(false);
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(52767, 52767));

        pointContainer.setBorder(null);

        refPointsPanel.setBorder(null);

        javax.swing.GroupLayout refPointsPanelLayout = new javax.swing.GroupLayout(refPointsPanel);
        refPointsPanel.setLayout(refPointsPanelLayout);
        refPointsPanelLayout.setHorizontalGroup(
            refPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        refPointsPanelLayout.setVerticalGroup(
            refPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        foundPointsPanel.setBorder(null);

        javax.swing.GroupLayout foundPointsPanelLayout = new javax.swing.GroupLayout(foundPointsPanel);
        foundPointsPanel.setLayout(foundPointsPanelLayout);
        foundPointsPanelLayout.setHorizontalGroup(
            foundPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );
        foundPointsPanelLayout.setVerticalGroup(
            foundPointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        foundPointsLabel.setText("Found Points");

        refPointsLabel.setText("Scope Reference Points");

        javax.swing.GroupLayout pointContainerLayout = new javax.swing.GroupLayout(pointContainer);
        pointContainer.setLayout(pointContainerLayout);
        pointContainerLayout.setHorizontalGroup(
            pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pointContainerLayout.createSequentialGroup()
                        .addComponent(refPointsLabel)
                        .addGap(0, 70, Short.MAX_VALUE))
                    .addComponent(refPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pointContainerLayout.createSequentialGroup()
                        .addComponent(foundPointsLabel)
                        .addGap(101, 101, 101))
                    .addGroup(pointContainerLayout.createSequentialGroup()
                        .addComponent(foundPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        pointContainerLayout.setVerticalGroup(
            pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pointContainerLayout.createSequentialGroup()
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foundPointsLabel)
                    .addComponent(refPointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pointContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(foundPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refPointsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(155, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(pointContainer);

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        statusBox.setColumns(20);
        statusBox.setEditable(false);
        statusBox.setLineWrap(true);
        statusBox.setRows(2);
        statusBox.setText(" ");
        statusBox.setWrapStyleWord(true);
        jScrollPane2.setViewportView(statusBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(calcButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton)
                    .addComponent(calcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        
        //Collect and pass to calculate object as long as some found points are selected.
        if(collectInput()) {
            updateStatus("Calculating with " + aggregatedInput.size() + " reference points.");
            calculator.calculateCoeffs(aggregatedInput);
        
            //Grab accuracy and display
            updateStatus("Accuracy of calculated coefficients: " + calculator.getAccuracy());
        
            //Enable saving
            saveButton.setEnabled(true);
        } else {
            updateStatus("Enter the x and y coordinate of found machine points to calculate.");
        }
    }//GEN-LAST:event_calcButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        updateStatus("Save button doesn't do anything yet.");
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoeffCalcWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoeffCalcWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoeffCalcWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoeffCalcWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CoeffCalcWindow().setVisible(true);
                
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcButton;
    private javax.swing.JLabel foundPointsLabel;
    private javax.swing.JPanel foundPointsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pointContainer;
    private javax.swing.JLabel refPointsLabel;
    private javax.swing.JPanel refPointsPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea statusBox;
    // End of variables declaration//GEN-END:variables

    
    private int numPoints;
    private DataPointFileProcessor data; 
    private CoeffCalculator calculator = new CoeffCalculator();
    
    //Array holding references to the textfields added for input
    private JFormattedTextField[][] inputFound;
    
    //ArrayList to pass to calculateMethod
    private ArrayList<double[]> aggregatedInput = new ArrayList<double[]>();
    
    /* Getters */
    
    public DataPointFileProcessor getData() {
        return data;
    }
    
    public int getNumPoints() {
        return numPoints;
    }
    
    /* Changing dpfp changes the number of reference points. */
    public void setData(DataPointFileProcessor dpfp) {
        data = dpfp;
        numPoints = dpfp.getReferencePoints().size();
        foundPointsPanel.removeAll();
        refPointsPanel.removeAll();
        initComponentsCustom();
    }
    
    
    private void initComponentsCustom() {
        
        //Whenever we initialize, clear our status box
        statusBox.setText("");

        //If no reference points selected, don't try to draw/enable anything.
        if (numPoints == 0) {
            updateStatus("No reference points selected.");
            return;
        }
            
        updateStatus(numPoints + " reference points selected.");
        calcButton.setEnabled(true);
     
        //Set grid for panels
        // Rows = number of points + 1 for headings
        refPointsPanel.setLayout(new GridLayout((numPoints+1), 3, 6, 1));
        foundPointsPanel.setLayout(new GridLayout((numPoints+1),2, 3, 1));
        
        //Set the dimensions for the array of textfields
        inputFound = new JFormattedTextField[numPoints][2];
        
        //Add headings for columns
        refPointsPanel.add(new JLabel("Point"));
        refPointsPanel.add(new JLabel("X Coord"));
        refPointsPanel.add(new JLabel("Y Coord"));
        foundPointsPanel.add(new JLabel("X Coord"));
        foundPointsPanel.add(new JLabel("Y Coord"));
        
        //Loop over refPoints and populate window
        for (int i = 0; i < numPoints; i++) {
           //Left side.
           Double x = data.getReferencePoints().get(i).getXCoord();
           Double y = data.getReferencePoints().get(i).getYCoord();
           int index = data.getReferencePoints().get(i).getNum();
           refPointsPanel.add(new JLabel("Point " + index));
           refPointsPanel.add(new JLabel(x.toString()));
           refPointsPanel.add(new JLabel(y.toString()));
           
           //Right Side
           
           //Create textfield objects for x and y per row         
           JFormattedTextField xInput = new JFormattedTextField(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));
           JFormattedTextField yInput = new JFormattedTextField(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.###"))));

           //Add to array
           inputFound[i][0] = xInput;
           inputFound[i][1] = yInput;
        
           //Add to panel
           foundPointsPanel.add(xInput);
           foundPointsPanel.add(yInput);
        }
        
        
    }
    
    /*
     * Collect coords for all points with found coords inputted.
     */
    private boolean collectInput() {
        boolean collected = false;
        //Clear any previous values
        aggregatedInput.clear();
        double[] newRow = new double[4];
        
        //Go through inputFound array
        for(int i = 0; i < inputFound.length; i++) {
            //If found coords are set for x and y, add to ArrayList
            if(!inputFound[i][0].getText().isEmpty() && !inputFound[i][1].getText().isEmpty()) {
                newRow[0] = data.getReferencePoints().get(i).getXCoord();
                newRow[1] = data.getReferencePoints().get(i).getYCoord();
                newRow[2] = Double.parseDouble(inputFound[i][0].getText());
                newRow[3] = Double.parseDouble(inputFound[i][1].getText());
                aggregatedInput.add(newRow);
                collected = true;
            }
        }
        
        return collected;
    }
    
    private void updateStatus(String text) {
        statusBox.append(text + "\n");
    }
    
}
