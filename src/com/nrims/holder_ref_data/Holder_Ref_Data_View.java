/*
 * Holder_Ref_Data_View.java
 */

package com.nrims.holder_ref_data;

import javax.swing.text.BadLocationException;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.io.*;
import java.text.DecimalFormat;
import com.nrims.holder_data_mgmt.*;


/**
 * The application's main frame.
 * @author bepstein
 */
public class Holder_Ref_Data_View extends FrameView {
    
    // Create filechooser instance to be used. It will remember its previous
    // location when reopened each time.
    private JFileChooser fc = new JFileChooser();

    public Holder_Ref_Data_View(SingleFrameApplication app) {
        super(app);

        initComponents();

        // Custom initialization.
        initInternalData();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Holder_Ref_Data_App.getApplication().getMainFrame();
            aboutBox = new Holder_Ref_Data_AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Holder_Ref_Data_App.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        holder_reg_gen_button = new javax.swing.JButton();
        testing = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        destReviewTable = new javax.swing.JTable()
        ;
        destLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        srcReviewTable = new javax.swing.JTable();
        srcLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        saveFile = new javax.swing.JMenuItem();
        saveAsPRSMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        SetupMenu = new javax.swing.JMenu();
        coeffFile = new javax.swing.JMenuItem();
        coordsFile = new javax.swing.JMenuItem();
        openRefFile = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jFrame1 = new javax.swing.JFrame();
        refFileContentReviewFrame1 = new com.nrims.holder_ref_data.RefFileContentReviewFrame();

        mainPanel.setName("mainPanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.nrims.holder_ref_data.Holder_Ref_Data_App.class).getContext().getActionMap(Holder_Ref_Data_View.class, this);
        holder_reg_gen_button.setAction(actionMap.get("holderRefGenerateFile")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.nrims.holder_ref_data.Holder_Ref_Data_App.class).getContext().getResourceMap(Holder_Ref_Data_View.class);
        holder_reg_gen_button.setText(resourceMap.getString("holder_reg_gen_button.text")); // NOI18N
        holder_reg_gen_button.setName("holder_reg_gen_button"); // NOI18N
        holder_reg_gen_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holder_reg_gen_buttonActionPerformed(evt);
            }
        });

        testing.setText(resourceMap.getString("testing.text")); // NOI18N
        testing.setName("testing"); // NOI18N
        testing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        destReviewTable.setName("destReviewTable"); // NOI18N
        jScrollPane1.setViewportView(destReviewTable);

        destLabel.setText(resourceMap.getString("destLabel.text")); // NOI18N
        destLabel.setName("destLabel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        srcReviewTable.setName("srcReviewTable"); // NOI18N
        jScrollPane2.setViewportView(srcReviewTable);

        srcLabel.setText(resourceMap.getString("srcLabel.text")); // NOI18N
        srcLabel.setName("srcLabel"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(testing)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(holder_reg_gen_button))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(srcLabel))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(destLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testing)
                    .addComponent(holder_reg_gen_button))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srcLabel)
                    .addComponent(destLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        saveFile.setText(resourceMap.getString("saveFile.text")); // NOI18N
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        saveAsPRSMenuItem.setText(resourceMap.getString("saveAsPRSMenuItem.text")); // NOI18N
        saveAsPRSMenuItem.setName("saveAsPRSMenuItem"); // NOI18N
        saveAsPRSMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsPRSMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsPRSMenuItem);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        SetupMenu.setText(resourceMap.getString("SetupMenu.text")); // NOI18N
        SetupMenu.setName("SetupMenu"); // NOI18N

        coeffFile.setText(resourceMap.getString("coeffFile.text")); // NOI18N
        coeffFile.setName("coeffFile"); // NOI18N
        coeffFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coeffFileActionPerformed(evt);
            }
        });
        SetupMenu.add(coeffFile);

        coordsFile.setText(resourceMap.getString("coordsFile.text")); // NOI18N
        coordsFile.setName("coordsFile"); // NOI18N
        coordsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordsFileActionPerformed(evt);
            }
        });
        SetupMenu.add(coordsFile);

        openRefFile.setText(resourceMap.getString("openRefFile.text")); // NOI18N
        openRefFile.setName("openRefFile"); // NOI18N
        openRefFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRefFileActionPerformed(evt);
            }
        });
        SetupMenu.add(openRefFile);

        menuBar.add(SetupMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addGap(384, 384, 384)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusAnimationLabel)
                        .addContainerGap())))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jFrame1.setName("jFrame1"); // NOI18N

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        refFileContentReviewFrame1.setName("refFileContentReviewFrame1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    //testing writing points in windows/text format
    //where should this eventually go????
    private void saveAsPRSMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsPRSMenuItemActionPerformed
        
        if ( dpfp == null )
            dpfp = new DataPointFileProcessor(
                    coeff_file_text,
                    coord_file_text,
                    ref_file_text
                    );
        else {
            dpfp.setCoeffFilePath( coeff_file_text );
            dpfp.setStagePointFilePath( coord_file_text );
            dpfp.setHolderPointFilePath( ref_file_text );
        }

        int saveApprove = fc.showSaveDialog(getFrame());
        if (saveApprove == JFileChooser.APPROVE_OPTION) {
            DataIO.savePRS(fc.getSelectedFile().getAbsolutePath(), dpfp);
        }
    }//GEN-LAST:event_saveAsPRSMenuItemActionPerformed

    private void holder_reg_gen_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holder_reg_gen_buttonActionPerformed
        if ( dpfp == null )
            dpfp = new DataPointFileProcessor(
                    coeff_file_text,
                    coord_file_text,
                    ref_file_text
                    );
        else {
            dpfp.setCoeffFilePath( coeff_file_text );
            dpfp.setStagePointFilePath( coord_file_text );
            dpfp.setHolderPointFilePath( ref_file_text );
        }

        // Create the reference point list
        dpfp.processTransform();
        RefPointList rpl = dpfp.getRefPointList();
        // Set the comment for each point
        for (int i=0; i<rpl.getNumRefPoints(); i++)
            rpl.getRefPoint(i).setComment(getCommentFor(i));
        /*Moving write functionality to the "save" button
        // Write the file
        HolderDataFile hdf = new HolderDataFile(dpfp.getHolderPointFilePath(), true, dpfp.getRefPointList());
        hdf.writeFileOut();
        hdf.close();
         *
         */

        destTableRefresh();

    }//GEN-LAST:event_holder_reg_gen_buttonActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        int saveApprove = fc.showSaveDialog( getFrame() );
        if (saveApprove == JFileChooser.APPROVE_OPTION) {
            DataIO.saveREF(fc.getSelectedFile().getPath(), dpfp);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void coeffFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coeffFileActionPerformed
        fc.showOpenDialog( getFrame() );
        coeff_file_text = fc.getSelectedFile().getPath();
    }//GEN-LAST:event_coeffFileActionPerformed

    private void coordsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordsFileActionPerformed
        fc.showOpenDialog( getFrame() );
        coord_file_text = fc.getSelectedFile().getPath();
    }//GEN-LAST:event_coordsFileActionPerformed

    private void openRefFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRefFileActionPerformed
        HolderDataFile hdf;
        RefPointList rpl;
        fc.showSaveDialog( getFrame() );
        ref_file_text = fc.getSelectedFile().getPath();

        /* Allowing ref file review if it exists. */
        if ( (new File( ref_file_text )).exists() ) {
            if ( dpfp == null )
                dpfp = new DataPointFileProcessor();

            dpfp.setHolderPointFilePath( ref_file_text );
            rpl = new RefPointList();

            hdf = new HolderDataFile( ref_file_text,
                    false,
                    rpl);

            hdf.readFileIn();
            hdf.close();
            dpfp.setRefPointList( hdf.getRefPointList() );

            destTableRefresh();
        }
    }//GEN-LAST:event_openRefFileActionPerformed

    private void testingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingActionPerformed

        coeff_file_text = "/nrims/home3/fkashem/NetBeansProjects/nikon2mims/trunk/holder_ref_data/test/gwen-exp9/coeff-gwen-exp9.txt";
        coord_file_text = "/nrims/home3/fkashem/NetBeansProjects/nikon2mims/trunk/holder_ref_data/test/gwen-exp9/xy.points";
        holder_reg_gen_buttonActionPerformed(new ActionEvent(new Object(), ActionEvent.ACTION_PERFORMED, ""));
    }//GEN-LAST:event_testingActionPerformed


    /**
     * Get the comment string currently in the text field.
     * @return the comment string
     */
    public String getCurrentComment() {
        return getCommentFor(-1);
    }

    /**
     * Create the comment for a given reference point.
     *
     * Takes the comment text from the text field (including the index for the
     * point, if the check box is checked), and creates a comment string.
     * 
     * @param i the index of the reference point
     * @return the comment string for the given index
     */
    public String getCommentFor(int i) {
        //Removing this option for the GUI, setting comment to default
        /*
        String comment = "";
        int len = data_point_comment_text.getDocument().getLength();
        try { comment = data_point_comment_text.getDocument().getText(0, len); }
        catch (BadLocationException ex) {}
        if (data_point_num_check.isSelected() && i >= 0)
            comment = (i + 1) + " " + comment;
         *
         */
        return "Holder reference point" +
            "                                                          ";
    }

    /*
     * Refreshes destReviewTable with data from dataPointFileProcessor
     */
    private void destTableRefresh() {
        destTableModel = new RDRTableModel(destReviewTable.getModel(), dpfp);
        destReviewTable.setModel(destTableModel);
    }

    //Variable declaration, temp for working on GUI
    private String coeff_file_text;
    private String coord_file_text;
    private String ref_file_text;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu SetupMenu;
    private javax.swing.JMenuItem coeffFile;
    private javax.swing.JMenuItem coordsFile;
    private javax.swing.JLabel destLabel;
    private javax.swing.JTable destReviewTable;
    private javax.swing.JButton holder_reg_gen_button;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openRefFile;
    private javax.swing.JProgressBar progressBar;
    private com.nrims.holder_ref_data.RefFileContentReviewFrame refFileContentReviewFrame1;
    private javax.swing.JMenuItem saveAsPRSMenuItem;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JLabel srcLabel;
    private javax.swing.JTable srcReviewTable;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JSeparator statusPanelSeparator;
    private javax.swing.JButton testing;
    // End of variables declaration//GEN-END:variables


    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    /* custom private variables */
    private DataPointFileProcessor dpfp;
    private RDRTableModel destTableModel;
    private RDRTableModel srcTableModel;
    

    /* Private methods */
    private void initInternalData()
    {
        dpfp = new DataPointFileProcessor();
       // data_point_comment_text.setText(
        //        dpfp.getRefPointList().getDefaultRefPointComment()
         //       );
    }

    @Action
    public void processDataPointComment()
    {

        dpfp.getRefPointList().setDefaultRefPointComment(getCurrentComment());
        
    }
}
